pip install mlflow
import mlflow
import mlflow.sklearn
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import time

# Sample data - replace this with your actual dataset
file_path = 'D:/10 Acadamy kifiya/Technical Content/data/Week1_challenge_data_source(CSV)'
data = pd.read_csv(file_path)

# Assuming 'satisfaction_score' is the target variable
X = data[['engagement_score', 'experience_score']]
y = data['satisfaction_score']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Start an MLflow run
with mlflow.start_run():
    start_time = time.time()

    # Model training
    model = RandomForestRegressor(n_estimators=100, max_depth=10, random_state=42)
    model.fit(X_train, y_train)

    # Predictions
    predictions = model.predict(X_test)

    # Calculate metrics
    mse = mean_squared_error(y_test, predictions)

    # Log parameters and metrics in MLflow
    mlflow.log_param("n_estimators", 100)
    mlflow.log_param("max_depth", 10)
    mlflow.log_metric("mse", mse)

    # Log the model as an artifact in MLflow
    mlflow.sklearn.log_model(model, "model")

    # Log the training and end times
    end_time = time.time()
    mlflow.log_param("start_time", start_time)
    mlflow.log_param("end_time", end_time)

    # Save metrics, loss convergence, and model output as a CSV
    output_df = pd.DataFrame({
        "Actual": y_test,
        "Predicted": predictions
    })
    output_csv = "output_predictions.csv"
    output_df.to_csv(output_csv, index=False)
    mlflow.log_artifact(output_csv)

    print(f"Model training completed with MSE: {mse}")

print("MLflow tracking finished. Run 'mlflow ui' to monitor the results.")
