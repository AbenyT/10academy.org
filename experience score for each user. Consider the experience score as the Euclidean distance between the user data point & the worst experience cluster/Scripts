import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from scipy.spatial.distance import euclidean

# Load the dataset
file_path = 'D:/10 Acadamy kifiya/Technical Content/data/Week1_challenge_data_source(CSV)'
data = pd.read_csv(file_path)

# Select relevant columns for experience metrics
experience_columns = ['Avg RTT DL (ms)', 'Avg RTT UL (ms)', 'Avg Bearer TP DL (kbps)', 'Avg Bearer TP UL (kbps)', 'TCP DL Retrans. Vol (Bytes)', 'TCP UL Retrans. Vol (Bytes)']

# Handle missing values by replacing with mean (or any other strategy as required)
data[experience_columns] = data[experience_columns].fillna(data[experience_columns].mean())

# Scale the data to ensure better K-Means performance
scaler = StandardScaler()
experience_data_scaled = scaler.fit_transform(data[experience_columns])

# Perform K-Means clustering with k=3
kmeans = KMeans(n_clusters=3, random_state=42)
data['cluster'] = kmeans.fit_predict(experience_data_scaled)

# Find centroids of the clusters
centroids = kmeans.cluster_centers_

# Identify the "worst experience" cluster
# (Here, I'm assuming the worst experience cluster is the one with the highest average RTT and highest retransmission volumes)
# You might need to define this based on specific characteristics of your data
worst_experience_cluster_index = np.argmax([np.mean(centroid) for centroid in centroids])

# Compute the experience score (Euclidean distance to the worst experience cluster centroid)
def compute_experience_score(row, centroid):
    user_metrics = row[experience_columns].values
    return euclidean(user_metrics, centroid)

# Calculate experience score for each user
data['experience_score'] = data.apply(lambda row: compute_experience_score(row, centroids[worst_experience_cluster_index]), axis=1)

# Display results
print(data[['MSISDN/Number', 'experience_score']].head())

# Save results to a new CSV if needed
output_path = 'D:/10 Acadamy kifiya/Technical Content/data/experience_scores.csv'
data[['MSISDN/Number', 'experience_score']].to_csv(output_path, index=False)
